		BACKGROUND INFORMATION
./nonprofits/:
- This folder contains two main things:
	handler.py
	<nonprofit directories>

handler.py:
- This is the script that will be launched by the web server,
whenever someone uploads new PDFs to the website
- It calls the appropriate template to parse those PDFs,
inserts their results into the database, and cleans up
those files which are now no longer needed

<nonprofit directories>:
- Each nonprofit has its own directory (ie, folder).
- The name of each directory is the name that will be used
in the database to identify the nonprofit.
(For example, if a directory (ie, folder) is named
"National Geographic", then all pdfs uploaded that select
this option will be inserted into the database under the
nonprofit tag of "National Geographic".
If the directory (ie, folder) were named "NatGeo", then all
insertions into the database for those pdfs would be under the
nonprofit tag of "NatGeo")
- Each <nonprofit directory> contains only one file,
named template.py.

template.py:
- template.py is the custom made template for processing
pdfs for that given nonprofit, based on the specific
formats that they tend to use over the years.
- Although each <nonprofit directory> will contain a template.py,
they will all be different from one another as each nonprofit
follows a different kind of formatting ofr their donor reports.



		THE WHOLE PROCESS
1) The user logs into the system
2) The user navigates to the "Upload PDFs" link on the navigation bar
3) The user specifies which nonprofit they are uploading PDFs for,
by selecting the appropriate radio button from a list provided to them.
- Note: this list is generated by simply providing the names of all
<nonprofit directories> in ./nonprofits/.
4) The user clicks the "Upload" button to select a number of files
that they want to upload for that nonprofit.

*** NOTE: PDF's name must begin with "year_" (for example, "2015_") ****
5) The user hits "submit" to upload all their files to the server.

6) The web server stores these uploaded files in the appropriate 
<nonprofit directory> based on the choice the user specified.
7) The web server calls the handler.py script to perform all
necessary actions.
8) handler.py runs a program that will convert these .pdf files
to .txt format, formatted into a single column.
8) handler.py then calls the template.py custom template for that
specific nonprofit, which produces a parsed output file.
9) handler.py then reads in this parsed output file and inserts
all of its records into the database.
10) handler.py then deletes the uploaded pdf that has been processed,
the .txt file it was converted to, and the parsed outfile file 
that was produced by template.py


		ADDING NEW TEMPLATES
To add a new template to the system, the following steps must be followed.

1) Create a directory in ./nonprofits/ with the name of the
nonprofit that you are adding a template for.
	For example: If adding a template for the Red Cross,
	create a directory named "Red Cross" (or "Red Cross Foundation",
	or any variant that you prefer).

2) Move your custom template into the directory you just created,
and rename it to "template.py".
	For example: Now your file would be 
	./nonprofits/Red Cross/template.py
- Note: that this one file should contain all necessary functions

3) template.py's function for parsing must be called "readTemplate"
- Note: thus no main() function is needed

4) readTemplate() must take exactly two parameters:
	- an absolute path to the filename that will be parsed
	(for example, ./nonprofits/NatGeo/uploaded_pdf1.txt)
	- an absolute path to the filename that will be written out to
	(for example, ./nonprofits/NatGeo/out_uploaded_pdf1.txt)
- This is for concurrency reasons, as having a single "out.txt" output file
means that multiple users cannot simultaneously upload pdfs for the same 
nonprofit, as their requests would be overwriting one another's "out.txt".


And that's it!
